<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<title>Crossword Client</title>
<style>
body { font-family: Arial, sans-serif; margin: 20px; }
label { display: inline-block; width: 200px; }
input[type="text"] { width: 80px; margin-bottom: 5px; }
button { margin: 5px; }
canvas { border: 1px solid black; margin-top: 20px; }
table { border-collapse: collapse; }
th, td { border: 1px solid black; padding: 4px; }
th.idCol, td.idCol { text-align: right; }
#clues { display: flex; gap: 20px; margin-top: 20px; }
#clues > div { flex: 1; }
#messages { max-height:300px; overflow-y:auto; border:1px solid #ccc; padding:5px; }
#solutionTable { border-collapse: collapse; width: auto; table-layout: auto; margin-bottom: 20px; }
#gameSection { display: flex; flex-direction: column; gap: 20px; }
h3.gameHeader { display: flex; align-items: center; gap: 10px; margin:0; }
h3.gameHeader button { margin-left: 10px; }
#solutionHeader { display: flex; align-items: center; gap: 10px; margin-bottom: 5px; }
#statusMessage { color: green; margin-top: 10px; }
#statusMessage.error { color: red; font-weight: bold; }
</style>
</head>
<body>
<h1>Crossword Client</h1>

<button id="loadButton">Load</button>
<input type="file" id="fileInput" accept=".cross" style="display:none" />

<div>
  <label>Number of Rows:</label><input type="text" id="rowsInput"><br>
  <label>Number of Cols:</label><input type="text" id="colsInput"><br>
  <label>Maximum number of Rows:</label><input type="text" id="maxRowsInput"><br>
  <label>Interval (secs):</label><input type="text" id="intervalInput"><br>
</div>

<button id="submitButton">Submit</button>
<div id="statusMessage"></div>

<h2>Incoming Messages</h2>
<ul id="messages"></ul>

<div id="solutionHeader">
  <h3 style="margin:0;">Solution</h3>
  <button id="printSolutionButton">Print Solution</button>
</div>
<table id="solutionTable">
  <tr><th class="idCol">ID</th><th>Orientation</th><th>Word</th></tr>
</table>

<h3 class="gameHeader">Game
  <button id="printButton">Print Game</button>
</h3>

<div id="gameSection">
  <canvas hidden id="gridCanvas"></canvas>
  <div id="clues">
    <div>
      <h3>Horizontals</h3>
      <table id="horizontalClues">
        <tr><th class="idCol">ID</th><th>Explanation</th></tr>
      </table>
    </div>
    <div>
      <h3>Verticals</h3>
      <table id="verticalClues">
        <tr><th class="idCol">ID</th><th>Explanation</th></tr>
      </table>
    </div>
  </div>
</div>

<script>
let ws;
let entries = [];
let rows=0, cols=0, max_rows=0, interval=0;

// WebSocket connect
function connectWebSocket() {
  ws = new WebSocket("ws://localhost:9002");
  ws.onopen = () => console.log("WebSocket connected");
  ws.onerror = e => console.error("WebSocket error", e);
  ws.onmessage = event => {
    try {
      const msg = JSON.parse(event.data);
      const messagesList = document.getElementById("messages");

      if(msg.response==="solved") {
        renderSolutionTable(msg.layouts);
        renderGrid(msg);
        renderClues(msg.layouts);
      } else {
        let text = "";
        if(msg.response==="configuration") {
          const r = parseInt(msg.rows?.replace(/"/g,"")) || 0;
          const c = parseInt(msg.cols?.replace(/"/g,"")) || 0;
          const perms = parseInt(msg.num_permutations?.replace(/"/g,"")) || 0;
          const memAvail = parseInt(msg.mem_available?.replace(/"/g,"")) || 0;
          const memUsed = parseInt(msg.mem_used?.replace(/"/g,"")) || 0;
          text = `Trying: ${r} x ${c}, where # permutations is ${perms}, memory available is ${memAvail} and used is ${memUsed}`;
        } else if(msg.response==="tries") {
          const perms = parseInt(msg.permutations?.replace(/"/g,"")) || 0;
          text = `Tried ${perms} permutations`;
        } 
        else if(msg.response==="unsolved") {
          text = `IT WAS NOT POSSIBLE to assemble the grid. Please try to increase the maximum number of rows or the interval used when trying to assemble`;
        } 
        else if(msg.response==="error") {
          const desc=msg.description
          text = `ERROR: ${desc}`;
        } 
        else {
          text = JSON.stringify(msg, null, 2);
        }

        const li = document.createElement("li");
        li.textContent = text;
        messagesList.appendChild(li);
        messagesList.scrollTop = messagesList.scrollHeight;
      }
    } catch(err) {
      console.error("Invalid message", err);
    }
  };
}
window.addEventListener("load", connectWebSocket);

// Load button
document.getElementById("loadButton").onclick = () => document.getElementById("fileInput").click();
document.getElementById("fileInput").addEventListener("change", e => {
  const file = e.target.files[0];
  if(!file) return;
  const reader = new FileReader();
  reader.onload = ev => {
    entries = ev.target.result
      .split("\n").map(l=>l.trim()).filter(l=>l.includes("|"))
      .map(l=>{const [word, explanation]=l.split("|"); return {word:word.trim(), explanation:explanation.trim()};});
    console.log("Entries loaded:", entries);
    document.getElementById("statusMessage").textContent = "Entries loaded! Click Submit to send.";
  };
  reader.readAsText(file);
});

// Inputs
function validateAndAssign(e, assignFunc) {
  const value = e.target.value.trim();
  const num = parseInt(value, 10);

  if (!value || isNaN(num) || num <= 0) {
    e.target.value = "";   // auto-clear invalid entry
    assignFunc(0);
  } else {
    assignFunc(num);
  }
}

document.getElementById("rowsInput").oninput = e => validateAndAssign(e, v => rows = v);
document.getElementById("colsInput").oninput = e => validateAndAssign(e, v => cols = v);
document.getElementById("maxRowsInput").oninput = e => validateAndAssign(e, v => max_rows = v);
document.getElementById("intervalInput").oninput = e => validateAndAssign(e, v => interval = v);

// Validate inputs
function validateInputs() {
  const statusEl = document.getElementById("statusMessage");
  statusEl.classList.remove("error");
  statusEl.textContent = "";

  if (!rows || !cols || !max_rows || !interval) {
    statusEl.textContent = "All fields must be filled with positive numbers.";
    statusEl.classList.add("error");
    return false;
  }
  if (rows <= 0 || cols <= 0 || max_rows <= 0 || interval <= 0) {
    statusEl.textContent = "Values must be positive numbers.";
    statusEl.classList.add("error");
    return false;
  }
  return true;
}

// Clear error automatically once inputs are valid
function clearErrorIfValid() {
  const statusEl = document.getElementById("statusMessage");
  if (statusEl.classList.contains("error") && rows > 0 && cols > 0 && max_rows > 0 && interval > 0) {
    statusEl.textContent = "";
    statusEl.classList.remove("error");
  }
}

// Submit
document.getElementById("submitButton").onclick = () => {
  if(!ws || ws.readyState!==WebSocket.OPEN){ alert("WebSocket not connected"); return; }
  if(!validateInputs()) return; // stop if invalid

  // Clear previous data
  document.getElementById("messages").innerHTML = "";
  const canvas = document.getElementById("gridCanvas");
  const ctx = canvas.getContext("2d");
  ctx.clearRect(0,0,canvas.width,canvas.height);
  document.getElementById("horizontalClues").innerHTML = "<tr><th class='idCol'>ID</th><th>Explanation</th></tr>";
  document.getElementById("verticalClues").innerHTML = "<tr><th class='idCol'>ID</th><th>Explanation</th></tr>";
  document.getElementById("solutionTable").innerHTML = "<tr><th class='idCol'>ID</th><th>Orientation</th><th>Word</th></tr>";

  // Send JSON
  ws.send(JSON.stringify({request:"create",rows,cols,max_rows,interval,entries}));
};

// Print grid + clues
document.getElementById("printButton").onclick = () => {
  const canvas = document.getElementById("gridCanvas");
  const imgData = canvas.toDataURL("image/png");
  const horizTable = document.getElementById("horizontalClues").outerHTML;
  const vertTable = document.getElementById("verticalClues").outerHTML;
  const printWindow = window.open("", "_blank");
  printWindow.document.write("<html><head><title>Print</title></head><body>");
  printWindow.document.write(`<img src="${imgData}" style="max-width:100%"><br><br>`);
  printWindow.document.write("<div style='display:flex; gap:20px;'>");
  printWindow.document.write("<div style='flex:1'>" + horizTable + "</div>");
  printWindow.document.write("<div style='flex:1'>" + vertTable + "</div>");
  printWindow.document.write("</div></body></html>");
  printWindow.document.close();
  printWindow.onload = () => { printWindow.print(); printWindow.close(); };
};

// Print solution table
document.getElementById("printSolutionButton").onclick = () => {
  const solutionTable = document.getElementById("solutionTable").outerHTML;
  const printWindow = window.open("", "_blank");
  printWindow.document.write("<html><head><title>Print Solution</title></head><body>");
  printWindow.document.write(solutionTable);
  printWindow.document.write("</body></html>");
  printWindow.document.close();
  printWindow.onload = () => { printWindow.print(); printWindow.close(); };
};

// Render solution table
function renderSolutionTable(layouts){
  const table = document.getElementById("solutionTable");
  table.innerHTML = "<tr><th class='idCol'>ID</th><th>Orientation</th><th>Word</th></tr>";
  layouts.forEach(l=>{
    const row = document.createElement("tr");
    const orientation = (l.orientation==="H")?"Horizontal":"Vertical";
    row.innerHTML = `<td class='idCol'>${l.id||""}</td><td>${orientation||""}</td><td>${l.word||""}</td>`;
    table.appendChild(row);
  });
}

// Render grid dynamically with proper scaling
function renderGrid(msg){
  const canvas = document.getElementById("gridCanvas");
  const ctx = canvas.getContext("2d");

  const nRows = parseInt(msg.rows.replace(/"/g,""));
  const nCols = parseInt(msg.cols.replace(/"/g,""));

  const maxCanvasSize = 1000; // maximum width or height
  const cellSize = Math.floor(Math.min(maxCanvasSize / nCols, maxCanvasSize / nRows));

  canvas.width = cellSize * nCols;
  canvas.height = cellSize * nRows;

  ctx.clearRect(0,0,canvas.width,canvas.height);
  ctx.strokeStyle = "black";
  ctx.font = `${cellSize / 3}px Arial`;
  ctx.textBaseline = "top";

  for(let r=0; r<nRows; r++){
    for(let c=0; c<nCols; c++){
      ctx.strokeRect(c*cellSize, r*cellSize, cellSize, cellSize);
    }
  }

  msg.layouts.forEach(layout=>{
    const x = parseInt(layout.col)*cellSize;
    const y = parseInt(layout.row)*cellSize;
    ctx.textAlign = (layout.orientation==="V") ? "left" : "right";
    ctx.fillText(layout.id||"", (layout.orientation==="V")?x+2:x+cellSize-2, y+2);
  });
}

// Render clues
function renderClues(layouts){
  const horizTable = document.getElementById("horizontalClues");
  const vertTable = document.getElementById("verticalClues");
  horizTable.innerHTML="<tr><th class='idCol'>ID</th><th>Explanation</th></tr>";
  vertTable.innerHTML="<tr><th class='idCol'>ID</th><th>Explanation</th></tr>";
  layouts.forEach(l=>{
    const row = `<tr><td class='idCol'>${l.id||""}</td><td>${l.explanation}</td></tr>`;
    if(l.orientation==="H") horizTable.innerHTML += row;
    else vertTable.innerHTML += row;
  });
}
</script>
</body>
</html>

