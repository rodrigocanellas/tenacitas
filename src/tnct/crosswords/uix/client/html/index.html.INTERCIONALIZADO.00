<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Crossword Client</title>
<style>
/* Modern CSS Reset and Base Styles */
* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

body {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
  line-height: 1.6;
  color: #333;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  min-height: 100vh;
  padding: 20px;
}

.container {
  max-width: 1200px;
  margin: 0 auto;
  background: white;
  border-radius: 12px;
  box-shadow: 0 20px 40px rgba(0,0,0,0.1);
  overflow: hidden;
}

/* Language Selector */
.language-selector {
  position: absolute;
  top: 1rem;
  right: 1rem;
  display: flex;
  gap: 0.5rem;
  z-index: 10;
}

.lang-btn {
  background: rgba(255, 255, 255, 0.2);
  border: 2px solid rgba(255, 255, 255, 0.3);
  border-radius: 8px;
  padding: 0.5rem;
  font-size: 1.2rem;
  cursor: pointer;
  transition: all 0.3s ease;
  backdrop-filter: blur(10px);
}

.lang-btn:hover {
  background: rgba(255, 255, 255, 0.3);
  border-color: rgba(255, 255, 255, 0.5);
  transform: translateY(-2px);
}

.lang-btn.active {
  background: rgba(255, 255, 255, 0.4);
  border-color: rgba(255, 255, 255, 0.7);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
}

.header {
  position: relative;
  background: linear-gradient(135deg, #4f46e5 0%, #7c3aed 100%);
  color: white;
  padding: 2rem;
  text-align: center;
}

.header h1 {
  font-size: 2.5rem;
  font-weight: 700;
  margin-bottom: 0.5rem;
}

.header p {
  opacity: 0.9;
  font-size: 1.1rem;
}

.content {
  padding: 2rem;
}

.section {
  background: #f8fafc;
  border-radius: 8px;
  padding: 1.5rem;
  margin-bottom: 2rem;
  border: 1px solid #e2e8f0;
}

.section h2 {
  color: #1e293b;
  font-size: 1.5rem;
  margin-bottom: 1rem;
  display: flex;
  align-items: center;
  gap: 0.5rem;
}

.section h3 {
  color: #475569;
  font-size: 1.25rem;
  margin-bottom: 1rem;
}

/* File Loading Section */
.file-section {
  background: linear-gradient(135deg, #dbeafe 0%, #bfdbfe 100%);
  border: 1px solid #3b82f6;
}

/* Configuration Section */
.config-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 1rem;
  margin-bottom: 1.5rem;
}

.input-group {
  display: flex;
  flex-direction: column;
}

.input-group label {
  font-weight: 600;
  color: #374151;
  margin-bottom: 0.5rem;
  font-size: 0.9rem;
}

.input-group input {
  padding: 0.75rem;
  border: 2px solid #d1d5db;
  border-radius: 6px;
  font-size: 1rem;
  transition: all 0.2s ease;
}

.input-group input:focus {
  outline: none;
  border-color: #4f46e5;
  box-shadow: 0 0 0 3px rgba(79, 70, 229, 0.1);
}

.input-group input:invalid {
  border-color: #ef4444;
}

/* Buttons */
.btn {
  display: inline-flex;
  align-items: center;
  gap: 0.5rem;
  padding: 0.75rem 1.5rem;
  border: none;
  border-radius: 6px;
  font-size: 1rem;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.2s ease;
  text-decoration: none;
}

.btn:hover {
  transform: translateY(-1px);
  box-shadow: 0 4px 12px rgba(0,0,0,0.15);
}

.btn-primary {
  background: linear-gradient(135deg, #4f46e5 0%, #7c3aed 100%);
  color: white;
}

.btn-primary:hover {
  background: linear-gradient(135deg, #4338ca 0%, #6d28d9 100%);
}

.btn-success {
  background: linear-gradient(135deg, #059669 0%, #047857 100%);
  color: white;
}

.btn-success:hover {
  background: linear-gradient(135deg, #047857 0%, #065f46 100%);
}

.btn-secondary {
  background: linear-gradient(135deg, #6b7280 0%, #4b5563 100%);
  color: white;
}

.btn-secondary:hover {
  background: linear-gradient(135deg, #4b5563 0%, #374151 100%);
}

.btn-print {
  background: linear-gradient(135deg, #7c2d12 0%, #92400e 100%);
  color: white;
}

.btn-print:hover {
  background: linear-gradient(135deg, #92400e 0%, #a16207 100%);
}

/* Status Messages */
.status-message {
  padding: 1rem;
  border-radius: 6px;
  margin-top: 1rem;
  font-weight: 500;
}

.status-success {
  background: #dcfce7;
  color: #166534;
  border: 1px solid #bbf7d0;
}

.status-error {
  background: #fef2f2;
  color: #dc2626;
  border: 1px solid #fecaca;
}

/* Messages Section */
.messages-container {
  background: #1f2937;
  border-radius: 6px;
  padding: 1rem;
  max-height: 300px;
  overflow-y: auto;
}

.messages-list {
  list-style: none;
}

.messages-list li {
  background: #374151;
  color: #f3f4f6;
  padding: 0.75rem;
  margin-bottom: 0.5rem;
  border-radius: 4px;
  font-family: 'Courier New', monospace;
  font-size: 0.9rem;
  border-left: 3px solid #4f46e5;
}

.messages-list li:last-child {
  margin-bottom: 0;
}

.messages-empty {
  color: #9ca3af;
  font-style: italic;
  text-align: center;
  padding: 2rem;
}

/* Tables */
.table-container {
  overflow-x: auto;
  border-radius: 6px;
  border: 1px solid #e5e7eb;
}

table {
  width: 100%;
  border-collapse: collapse;
  background: white;
}

th {
  background: #f9fafb;
  color: #374151;
  font-weight: 600;
  padding: 1rem;
  text-align: left;
  border-bottom: 2px solid #e5e7eb;
}

td {
  padding: 0.75rem 1rem;
  border-bottom: 1px solid #f3f4f6;
}

tr:hover {
  background: #f8fafc;
}

th.idCol, td.idCol {
  text-align: right;
  font-family: 'Courier New', monospace;
  font-weight: 600;
}

/* Canvas */
.canvas-container {
  text-align: center;
  padding: 1rem;
  background: white;
  border-radius: 6px;
  border: 1px solid #e5e7eb;
  margin-bottom: 1rem;
}

canvas {
  border: 2px solid #d1d5db;
  border-radius: 4px;
  box-shadow: 0 4px 6px rgba(0,0,0,0.1);
  max-width: 100%;
  height: auto;
}

/* Clues Layout */
.clues-container {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 2rem;
  margin-top: 1rem;
}

@media (max-width: 768px) {
  .clues-container {
    grid-template-columns: 1fr;
  }
  
  .config-grid {
    grid-template-columns: 1fr;
  }
  
  .header h1 {
    font-size: 2rem;
  }
  
  .content {
    padding: 1rem;
  }
}

/* Section Headers with Actions */
.section-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1rem;
  flex-wrap: wrap;
  gap: 1rem;
}

.section-header h2,
.section-header h3 {
  margin: 0;
}

/* Hidden elements */
.hidden {
  display: none !important;
}

/* Icons (using Unicode symbols) */
.icon {
  font-size: 1.2em;
  margin-right: 0.25rem;
}

/* Loading animation */
@keyframes pulse {
  0%, 100% { opacity: 1; }
  50% { opacity: 0.5; }
}

.loading {
  animation: pulse 2s infinite;
}

/* Word Entry Table Styles */
.word-entry-row input {
  width: 100%;
  padding: 0.5rem;
  border: 1px solid #d1d5db;
  border-radius: 4px;
  font-size: 0.9rem;
  background: white;
}

.word-entry-row input:focus {
  outline: none;
  border-color: #4f46e5;
  box-shadow: 0 0 0 2px rgba(79, 70, 229, 0.1);
}

.word-entry-row .word-input {
  font-family: 'Courier New', monospace;
  font-weight: 600;
  text-transform: uppercase;
}

.word-entry-row .explanation-input {
  font-family: inherit;
}

.remove-row-btn {
  background: #ef4444;
  color: white;
  border: none;
  border-radius: 4px;
  padding: 0.25rem 0.5rem;
  cursor: pointer;
  font-size: 0.8rem;
  transition: background-color 0.2s;
}

.remove-row-btn:hover {
  background: #dc2626;
}
</style>
</head>
<body>
<div class="container">
  <div class="header">
    <!-- Language Selector -->
    <div class="language-selector">
      <button class="lang-btn active" data-lang="en" title="English">üá¨üáß</button>
      <button class="lang-btn" data-lang="pt" title="Portugu√™s">üáµüáπ</button>
      <button class="lang-btn" data-lang="es" title="Espa√±ol">üá™üá∏</button>
      <button class="lang-btn" data-lang="it" title="Italiano">üáÆüáπ</button>
    </div>
    
    <h1><span class="icon">üß©</span><span data-i18n="app.title">Crossword Client</span></h1>
    <p data-i18n="app.subtitle">Professional crossword puzzle generator and solver</p>
  </div>

  <div class="content">
    <!-- File Loading Section -->
    <div class="section file-section">
      <h2><span class="icon">üìÅ</span><span data-i18n="file.title">Load Crossword File</span></h2>
      <p style="margin-bottom: 1rem; color: #1e40af;" data-i18n="file.description">Select a .cross file containing your word entries and explanations.</p>
      <div style="display: flex; gap: 1rem; flex-wrap: wrap;">
        <button id="loadButton" class="btn btn-primary">
          <span class="icon">‚¨ÜÔ∏è</span><span data-i18n="file.choose">Choose File</span>
        </button>
        <button id="saveButton" class="btn btn-secondary">
          <span class="icon">üíæ</span><span data-i18n="file.save">Save as .cross</span>
        </button>
      </div>
      <input type="file" id="fileInput" accept=".cross" class="hidden" />
      <div id="fileStatus" class="status-message hidden"></div>
    </div>

    <!-- Word Entry Editor Section -->
    <div class="section">
      <div class="section-header">
        <h2><span class="icon">‚úèÔ∏è</span><span data-i18n="editor.title">Word Entry Editor</span></h2>
        <div style="display: flex; gap: 0.5rem; flex-wrap: wrap;">
          <button id="addRowButton" class="btn btn-success">
            <span class="icon">‚ûï</span><span data-i18n="editor.add">Add Word</span>
          </button>
          <button id="clearAllButton" class="btn btn-secondary">
            <span class="icon">üóëÔ∏è</span><span data-i18n="editor.clear">Clear All</span>
          </button>
        </div>
      </div>
      <div class="table-container">
        <table id="wordEntryTable">
          <thead>
            <tr>
              <th style="width: 30%;" data-i18n="editor.word">Word</th>
              <th style="width: 60%;" data-i18n="editor.clue">Explanation/Clue</th>
              <th style="width: 10%;" data-i18n="editor.actions">Actions</th>
            </tr>
          </thead>
          <tbody id="wordEntryTableBody">
            <!-- Rows will be added dynamically -->
          </tbody>
        </table>
      </div>
      <div id="entryCount" style="margin-top: 0.5rem; color: #6b7280; font-size: 0.9rem;">
        0 <span data-i18n="editor.entries">entries</span>
      </div>
    </div>

    <!-- Configuration Section -->
    <div class="section">
      <h2><span class="icon">‚öôÔ∏è</span><span data-i18n="config.title">Grid Configuration</span></h2>
      <div class="config-grid">
        <div class="input-group">
          <label for="rowsInput" data-i18n="config.rows">Number of Rows</label>
          <input type="number" id="rowsInput" min="1" placeholder="e.g., 15">
        </div>
        <div class="input-group">
          <label for="colsInput" data-i18n="config.cols">Number of Columns</label>
          <input type="number" id="colsInput" min="1" placeholder="e.g., 15">
        </div>
        <div class="input-group">
          <label for="maxRowsInput" data-i18n="config.maxrows">Maximum Rows</label>
          <input type="number" id="maxRowsInput" min="1" placeholder="e.g., 20">
        </div>
        <div class="input-group">
          <label for="intervalInput" data-i18n="config.interval">Interval (seconds)</label>
          <input type="number" id="intervalInput" min="1" placeholder="e.g., 5">
        </div>
      </div>
      
      <button id="submitButton" class="btn btn-success">
        <span class="icon">üöÄ</span><span data-i18n="config.generate">Generate Crossword</span>
      </button>
      <div id="statusMessage" class="status-message hidden"></div>
    </div>

    <!-- Messages Section -->
    <div class="section">
      <h2><span class="icon">üí¨</span><span data-i18n="messages.title">Server Messages</span></h2>
      <div class="messages-container">
        <ul id="messages" class="messages-list">
          <li class="messages-empty" data-i18n="messages.waiting">Waiting for server connection...</li>
        </ul>
      </div>
    </div>

    <!-- Solution Section -->
    <div class="section">
      <div class="section-header">
        <h2><span class="icon">‚úÖ</span><span data-i18n="solution.title">Solution</span></h2>
        <button id="printSolutionButton" class="btn btn-print">
          <span class="icon">üñ®Ô∏è</span><span data-i18n="solution.print">Print Solution</span>
        </button>
      </div>
      
      <div class="clues-container">
        <div>
          <h3><span class="icon">‚û°Ô∏è</span><span data-i18n="solution.horizontal">Horizontal Words</span></h3>
          <div class="table-container">
            <table id="horizontalSolution">
              <thead>
                <tr><th class="idCol">ID</th><th data-i18n="solution.word">Word</th></tr>
              </thead>
              <tbody></tbody>
            </table>
          </div>
        </div>
        <div>
          <h3><span class="icon">‚¨áÔ∏è</span><span data-i18n="solution.vertical">Vertical Words</span></h3>
          <div class="table-container">
            <table id="verticalSolution">
              <thead>
                <tr><th class="idCol">ID</th><th data-i18n="solution.word">Word</th></tr>
              </thead>
              <tbody></tbody>
            </table>
          </div>
        </div>
      </div>
    </div>

    <!-- Game Section -->
    <div class="section">
      <div class="section-header">
        <h2><span class="icon">üéÆ</span><span data-i18n="game.title">Crossword Game</span></h2>
        <button id="printButton" class="btn btn-print">
          <span class="icon">üñ®Ô∏è</span><span data-i18n="game.print">Print Game</span>
        </button>
      </div>

      <div class="canvas-container">
        <canvas id="gridCanvas" class="hidden"></canvas>
        <div id="canvasPlaceholder" class="messages-empty" data-i18n="game.placeholder">Grid will appear here after generation</div>
      </div>

      <div class="clues-container">
        <div>
          <h3><span class="icon">‚û°Ô∏è</span><span data-i18n="game.horizontal">Horizontal Clues</span></h3>
          <div class="table-container">
            <table id="horizontalClues">
              <thead>
                <tr><th class="idCol">ID</th><th data-i18n="game.clue">Clue</th></tr>
              </thead>
              <tbody></tbody>
            </table>
          </div>
        </div>
        <div>
          <h3><span class="icon">‚¨áÔ∏è</span><span data-i18n="game.vertical">Vertical Clues</span></h3>
          <div class="table-container">
            <table id="verticalClues">
              <thead>
                <tr><th class="idCol">ID</th><th data-i18n="game.clue">Clue</th></tr>
              </thead>
              <tbody></tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
console.log('üöÄ JavaScript started loading...');

// Global variables
var currentLanguage = 'en';
var ws;
var entries = [];
var rows = 0, cols = 0, max_rows = 0, interval = 0;

// Translations object
var translations = {
  en: {
    'app.title': 'Crossword Client',
    'app.subtitle': 'Professional crossword puzzle generator and solver',
    'file.title': 'Load Crossword File',
    'file.description': 'Select a .cross file containing your word entries and explanations.',
    'file.choose': 'Choose File',
    'file.save': 'Save as .cross',
    'editor.title': 'Word Entry Editor',
    'editor.add': 'Add Word',
    'editor.clear': 'Clear All',
    'editor.word': 'Word',
    'editor.clue': 'Explanation/Clue',
    'editor.actions': 'Actions',
    'editor.entries': 'entries',
    'editor.word_placeholder': 'Enter word...',
    'editor.clue_placeholder': 'Enter clue/explanation...',
    'config.title': 'Grid Configuration',
    'config.rows': 'Number of Rows',
    'config.cols': 'Number of Columns',
    'config.maxrows': 'Maximum Rows',
    'config.interval': 'Interval (seconds)',
    'config.generate': 'Generate Crossword',
    'messages.title': 'Server Messages',
    'messages.waiting': 'Waiting for server connection...',
    'solution.title': 'Solution',
    'solution.print': 'Print Solution',
    'solution.horizontal': 'Horizontal Words',
    'solution.vertical': 'Vertical Words',
    'solution.word': 'Word',
    'game.title': 'Crossword Game',
    'game.print': 'Print Game',
    'game.placeholder': 'Grid will appear here after generation',
    'game.horizontal': 'Horizontal Clues',
    'game.vertical': 'Vertical Clues',
    'game.clue': 'Clue'
  },
  pt: {
    'app.title': 'Cliente de Palavras Cruzadas',
    'app.subtitle': 'Gerador e solucionador profissional de palavras cruzadas',
    'file.title': 'Carregar Ficheiro de Palavras Cruzadas',
    'file.description': 'Seleccione um ficheiro .cross contendo as suas entradas de palavras e explica√ß√µes.',
    'file.choose': 'Escolher Ficheiro',
    'file.save': 'Guardar como .cross',
    'editor.title': 'Editor de Entradas de Palavras',
    'editor.add': 'Adicionar Palavra',
    'editor.clear': 'Limpar Tudo',
    'editor.word': 'Palavra',
    'editor.clue': 'Explica√ß√£o/Pista',
    'editor.actions': 'Ac√ß√µes',
    'editor.entries': 'entradas',
    'editor.word_placeholder': 'Introduza palavra...',
    'editor.clue_placeholder': 'Introduza pista/explica√ß√£o...',
    'config.title': 'Configura√ß√£o da Grelha',
    'config.rows': 'N√∫mero de Linhas',
    'config.cols': 'N√∫mero de Colunas',
    'config.maxrows': 'M√°ximo de Linhas',
    'config.interval': 'Intervalo (segundos)',
    'config.generate': 'Gerar Palavras Cruzadas',
    'messages.title': 'Mensagens do Servidor',
    'messages.waiting': 'Aguardando liga√ß√£o ao servidor...',
    'solution.title': 'Solu√ß√£o',
    'solution.print': 'Imprimir Solu√ß√£o',
    'solution.horizontal': 'Palavras Horizontais',
    'solution.vertical': 'Palavras Verticais',
    'solution.word': 'Palavra',
    'game.title': 'Jogo de Palavras Cruzadas',
    'game.print': 'Imprimir Jogo',
    'game.placeholder': 'A grelha aparecer√° aqui ap√≥s a gera√ß√£o',
    'game.horizontal': 'Pistas Horizontais',
    'game.vertical': 'Pistas Verticais',
    'game.clue': 'Pista'
  },
  es: {
    'app.title': 'Cliente de Crucigramas',
    'app.subtitle': 'Generador y solucionador profesional de crucigramas',
    'file.title': 'Cargar Archivo de Crucigramas',
    'file.description': 'Seleccione un archivo .cross que contenga sus entradas de palabras y explicaciones.',
    'file.choose': 'Elegir Archivo',
    'file.save': 'Guardar como .cross',
    'editor.title': 'Editor de Entradas de Palabras',
    'editor.add': 'A√±adir Palabra',
    'editor.clear': 'Limpiar Todo',
    'editor.word': 'Palabra',
    'editor.clue': 'Explicaci√≥n/Pista',
    'editor.actions': 'Acciones',
    'editor.entries': 'entradas',
    'editor.word_placeholder': 'Introducir palabra...',
    'editor.clue_placeholder': 'Introducir pista/explicaci√≥n...',
    'config.title': 'Configuraci√≥n de la Cuadr√≠cula',
    'config.rows': 'N√∫mero de Filas',
    'config.cols': 'N√∫mero de Columnas',
    'config.maxrows': 'M√°ximo de Filas',
    'config.interval': 'Intervalo (segundos)',
    'config.generate': 'Generar Crucigrama',
    'messages.title': 'Mensajes del Servidor',
    'messages.waiting': 'Esperando conexi√≥n del servidor...',
    'solution.title': 'Soluci√≥n',
    'solution.print': 'Imprimir Soluci√≥n',
    'solution.horizontal': 'Palabras Horizontales',
    'solution.vertical': 'Palabras Verticales',
    'solution.word': 'Palabra',
    'game.title': 'Juego de Crucigramas',
    'game.print': 'Imprimir Juego',
    'game.placeholder': 'La cuadr√≠cula aparecer√° aqu√≠ despu√©s de la generaci√≥n',
    'game.horizontal': 'Pistas Horizontales',
    'game.vertical': 'Pistas Verticales',
    'game.clue': 'Pista'
  },
  it: {
    'app.title': 'Client per Cruciverba',
    'app.subtitle': 'Generatore e risolutore professionale di cruciverba',
    'file.title': 'Carica File Cruciverba',
    'file.description': 'Seleziona un file .cross contenente le tue voci di parole e spiegazioni.',
    'file.choose': 'Scegli File',
    'file.save': 'Salva come .cross',
    'editor.title': 'Editor delle Voci delle Parole',
    'editor.add': 'Aggiungi Parola',
    'editor.clear': 'Cancella Tutto',
    'editor.word': 'Parola',
    'editor.clue': 'Spiegazione/Indizio',
    'editor.actions': 'Azioni',
    'editor.entries': 'voci',
    'editor.word_placeholder': 'Inserisci parola...',
    'editor.clue_placeholder': 'Inserisci indizio/spiegazione...',
    'config.title': 'Configurazione Griglia',
    'config.rows': 'Numero di Righe',
    'config.cols': 'Numero di Colonne',
    'config.maxrows': 'Massimo Righe',
    'config.interval': 'Intervallo (secondi)',
    'config.generate': 'Genera Cruciverba',
    'messages.title': 'Messaggi del Server',
    'messages.waiting': 'In attesa della connessione al server...',
    'solution.title': 'Soluzione',
    'solution.print': 'Stampa Soluzione',
    'solution.horizontal': 'Parole Orizzontali',
    'solution.vertical': 'Parole Verticali',
    'solution.word': 'Parola',
    'game.title': 'Gioco Cruciverba',
    'game.print': 'Stampa Gioco',
    'game.placeholder': 'La griglia apparir√† qui dopo la generazione',
    'game.horizontal': 'Indizi Orizzontali',
    'game.vertical': 'Indizi Verticali',
    'game.clue': 'Indizio'
  }
};

console.log('üìö Translations loaded:', Object.keys(translations));

// Translation function
function translate(key) {
  var result = translations[currentLanguage] && translations[currentLanguage][key];
  return result || key;
}

// Update UI function
function updateUI() {
  console.log('üîÑ Updating UI to language:', currentLanguage);
  
  var elements = document.querySelectorAll('[data-i18n]');
  console.log('üè∑Ô∏è Found elements with data-i18n:', elements.length);
  
  for (var i = 0; i < elements.length; i++) {
    var element = elements[i];
    var key = element.getAttribute('data-i18n');
    var translation = translate(key);
    element.textContent = translation;
    element.textContent = translation;
    console.log('‚úÖ Translated "' + key + '" to "' + translation + '"');
  }
  
  // Update placeholders
  var wordInputs = document.querySelectorAll('.word-input');
  for (var i = 0; i < wordInputs.length; i++) {
    wordInputs[i].placeholder = translate('editor.word_placeholder');
  }
  
  var explanationInputs = document.querySelectorAll('.explanation-input');
  for (var i = 0; i < explanationInputs.length; i++) {
    explanationInputs[i].placeholder = translate('editor.clue_placeholder');
  }
  
  // Update config placeholders
  var placeholderPrefix = currentLanguage === 'pt' ? 'ex.' : 
                         currentLanguage === 'es' ? 'ej.' :
                         currentLanguage === 'it' ? 'es.' : 'e.g.';
  
  document.getElementById('rowsInput').placeholder = placeholderPrefix + ', 15';
  document.getElementById('colsInput').placeholder = placeholderPrefix + ', 15';
  document.getElementById('maxRowsInput').placeholder = placeholderPrefix + ', 20';
  document.getElementById('intervalInput').placeholder = placeholderPrefix + ', 5';
  
  updateEntryCount();
}

// Switch language function
function switchLanguage(lang) {
  console.log('üîÄ Switching language to:', lang);
  
  if (!translations[lang]) {
    console.error('‚ùå Language not found:', lang);
    return;
  }
  
  currentLanguage = lang;
  
  // Update active button
  var buttons = document.querySelectorAll('.lang-btn');
  for (var i = 0; i < buttons.length; i++) {
    buttons[i].classList.remove('active');
  }
  
  var activeBtn = document.querySelector('[data-lang="' + lang + '"]');
  if (activeBtn) {
    activeBtn.classList.add('active');
    console.log('‚úÖ Set active button for:', lang);
  }
  
  updateUI();
  
  // Save to localStorage
  try {
    localStorage.setItem('crossword-language', lang);
    console.log('üíæ Saved language to localStorage:', lang);
  } catch (e) {
    console.log('‚ö†Ô∏è LocalStorage not available');
  }
}

// WebSocket functions
function connectWebSocket() {
  try {
    ws = new WebSocket("ws://localhost:9002");
    
    ws.onopen = function() {
      console.log("WebSocket connected");
      updateMessages("‚úÖ Connected to crossword server", "success");
    };
    
    ws.onerror = function(e) {
      console.error("WebSocket error", e);
      updateMessages("‚ùå Failed to connect to server. Make sure your crossword server is running on localhost:9002", "error");
    };
    
    ws.onclose = function() {
      console.log("WebSocket disconnected");
      updateMessages("‚ö†Ô∏è Disconnected from server", "warning");
    };
    
    ws.onmessage = handleWebSocketMessage;
  } catch (error) {
    console.error("WebSocket connection failed:", error);
    updateMessages("‚ùå WebSocket connection failed", "error");
  }
}

function handleWebSocketMessage(event) {
  try {
    var msg = JSON.parse(event.data);
    
    if (msg.response === "solved") {
      renderSolutionTable(msg.layouts);
      renderGrid(msg);
      renderClues(msg.layouts);
      updateMessages("üéâ Crossword generated successfully!", "success");
    } else {
      var text = "";
      var type = "info";
      
      if (msg.response === "configuration") {
        var r = parseInt(msg.rows && msg.rows.replace(/"/g, "")) || 0;
        var c = parseInt(msg.cols && msg.cols.replace(/"/g, "")) || 0;
        var perms = parseInt(msg.num_permutations && msg.num_permutations.replace(/"/g, "")) || 0;
        var memAvail = parseInt(msg.mem_available && msg.mem_available.replace(/"/g, "")) || 0;
        var memUsed = parseInt(msg.mem_used && msg.mem_used.replace(/"/g, "")) || 0;
        text = "üîÑ Trying: " + r + " √ó " + c + " grid, " + perms.toLocaleString() + " permutations, " + memAvail + "MB available, " + memUsed + "MB used";
      } else if (msg.response === "tries") {
        var perms = parseInt(msg.permutations && msg.permutations.replace(/"/g, "")) || 0;
        text = "‚è≥ Tried " + perms.toLocaleString() + " permutations...";
      } else if (msg.response === "unsolved") {
        text = "‚ùå Could not generate crossword. Try increasing maximum rows or interval.";
        type = "error";
      } else if (msg.response === "error") {
        text = "‚ùå Server Error: " + msg.explanation;
        type = "error";
      } else {
        text = "üìù " + JSON.stringify(msg, null, 2);
      }
      
      updateMessages(text, type);
    }
  } catch (err) {
    console.error("Invalid message format:", err);
    updateMessages("‚ö†Ô∏è Received invalid message from server", "warning");
  }
}

function updateMessages(text, type) {
  var messagesList = document.getElementById("messages");
  var emptyMessage = messagesList.querySelector(".messages-empty");
  
  if (emptyMessage) {
    emptyMessage.remove();
  }
  
  var li = document.createElement("li");
  li.textContent = text;
  li.className = "message-" + type;
  
  messagesList.appendChild(li);
  messagesList.scrollTop = messagesList.scrollHeight;
  
  while (messagesList.children.length > 50) {
    messagesList.removeChild(messagesList.firstChild);
  }
}

// Word entry functions
function addWordEntryRow(word, explanation) {
  word = word || '';
  explanation = explanation || '';
  
  var tbody = document.getElementById("wordEntryTableBody");
  var row = document.createElement("tr");
  row.className = "word-entry-row";
  
  row.innerHTML = 
    '<td>' +
      '<input type="text" class="word-input" placeholder="' + translate('editor.word_placeholder') + '" value="' + word + '" ' +
             'oninput="this.value = this.value.toUpperCase().replace(/[^A-Z]/g, \'\')" maxlength="20">' +
    '</td>' +
    '<td>' +
      '<input type="text" class="explanation-input" placeholder="' + translate('editor.clue_placeholder') + '" value="' + explanation + '" maxlength="200">' +
    '</td>' +
    '<td style="text-align: center;">' +
      '<button class="remove-row-btn" onclick="removeWordEntryRow(this)" title="Remove this entry">' +
        '‚ùå' +
      '</button>' +
    '</td>';
  
  tbody.appendChild(row);
  updateEntryCount();
  
  if (!word) {
    var wordInput = row.querySelector('.word-input');
    wordInput.focus();
  }
}

function removeWordEntryRow(button) {
  var row = button.closest('tr');
  row.remove();
  updateEntryCount();
}

function getEntriesFromTable() {
  var rows = document.querySelectorAll("#wordEntryTableBody .word-entry-row");
  var tableEntries = [];
  
  for (var i = 0; i < rows.length; i++) {
    var row = rows[i];
    var word = row.querySelector('.word-input').value.trim();
    var explanation = row.querySelector('.explanation-input').value.trim();
    
    if (word && explanation) {
      tableEntries.push({ word: word, explanation: explanation });
    }
  }
  
  return tableEntries;
}

function updateEntryCount() {
  var validEntries = getEntriesFromTable();
  var countEl = document.getElementById("entryCount");
  countEl.innerHTML = validEntries.length + ' <span data-i18n="editor.entries">' + translate('editor.entries') + '</span>';
  entries = validEntries;
}

// Grid rendering functions
function renderGrid(msg) {
  var canvas = document.getElementById("gridCanvas");
  var ctx = canvas.getContext("2d");

  var nRows = parseInt(msg.rows.replace(/"/g, ""));
  var nCols = parseInt(msg.cols.replace(/"/g, ""));

  var activeCells = new Set();
  
  for (var i = 0; i < msg.layouts.length; i++) {
    var layout = msg.layouts[i];
    var startRow = parseInt(layout.row);
    var startCol = parseInt(layout.col);
    var wordLength = layout.word.length;
    
    if (layout.orientation === "H") {
      for (var j = 0; j < wordLength; j++) {
        activeCells.add(startRow + "," + (startCol + j));
      }
    } else {
      for (var j = 0; j < wordLength; j++) {
        activeCells.add((startRow + j) + "," + startCol);
      }
    }
  }

  var minRow = nRows, maxRow = -1, minCol = nCols, maxCol = -1;
  
  activeCells.forEach(function(cellKey) {
    var parts = cellKey.split(',');
    var row = parseInt(parts[0]);
    var col = parseInt(parts[1]);
    minRow = Math.min(minRow, row);
    maxRow = Math.max(maxRow, row);
    minCol = Math.min(minCol, col);
    maxCol = Math.max(maxCol, col);
  });

  var effectiveRows = maxRow - minRow + 1;
  var effectiveCols = maxCol - minCol + 1;

  var maxCanvasSize = 700;
  var cellSize = Math.min(
    Math.floor(maxCanvasSize / effectiveCols),
    Math.floor(maxCanvasSize / effectiveRows),
    50
  );
  
  var padding = 20;
  canvas.width = cellSize * effectiveCols + padding * 2;
  canvas.height = cellSize * effectiveRows + padding * 2;

  ctx.clearRect(0, 0, canvas.width, canvas.height);

  activeCells.forEach(function(cellKey) {
    var parts = cellKey.split(',');
    var absoluteRow = parseInt(parts[0]);
    var absoluteCol = parseInt(parts[1]);
    
    var relativeRow = absoluteRow - minRow;
    var relativeCol = absoluteCol - minCol;
    
    var x = relativeCol * cellSize + padding;
    var y = relativeRow * cellSize + padding;
    
    ctx.fillStyle = "#ffffff";
    ctx.fillRect(x, y, cellSize, cellSize);
    
    ctx.strokeStyle = "#2d3748";
    ctx.lineWidth = 2;
    ctx.strokeRect(x, y, cellSize, cellSize);
  });

  ctx.fillStyle = "#2d3748";
  ctx.font = "bold " + Math.max(cellSize / 6, 8) + "px Arial";
  
  for (var i = 0; i < msg.layouts.length; i++) {
    var layout = msg.layouts[i];
    var absoluteRow = parseInt(layout.row);
    var absoluteCol = parseInt(layout.col);
    
    var relativeRow = absoluteRow - minRow;
    var relativeCol = absoluteCol - minCol;
    
    var x = relativeCol * cellSize + padding;
    var y = relativeRow * cellSize + padding;
    
    var numberX, numberY;
    
    if (layout.orientation === "H") {
      numberX = x + cellSize - 3;
      numberY = y + 3;
      ctx.textAlign = "right";
    } else {
      numberX = x + 3;
      numberY = y + 3;
      ctx.textAlign = "left";
    }
    
    ctx.textBaseline = "top";
    ctx.fillText(layout.id || "", numberX, numberY);
  }

  canvas.classList.remove("hidden");
  document.getElementById("canvasPlaceholder").style.display = "none";
}

function renderSolutionTable(layouts) {
  var horizTbody = document.getElementById("horizontalSolution").querySelector("tbody");
  var vertTbody = document.getElementById("verticalSolution").querySelector("tbody");
  
  horizTbody.innerHTML = "";
  vertTbody.innerHTML = "";
  
  for (var i = 0; i < layouts.length; i++) {
    var layout = layouts[i];
    var row = document.createElement("tr");
    row.innerHTML = 
      '<td class="idCol">' + (layout.id || "") + '</td>' +
      '<td style="font-weight: 600;">' + (layout.word || "") + '</td>';
    
    if (layout.orientation === "H") {
      horizTbody.appendChild(row);
    } else {
      vertTbody.appendChild(row);
    }
  }
}

function renderClues(layouts) {
  var horizTbody = document.getElementById("horizontalClues").querySelector("tbody");
  var vertTbody = document.getElementById("verticalClues").querySelector("tbody");
  
  horizTbody.innerHTML = "";
  vertTbody.innerHTML = "";
  
  for (var i = 0; i < layouts.length; i++) {
    var layout = layouts[i];
    var row = document.createElement("tr");
    row.innerHTML = 
      '<td class="idCol">' + (layout.id || "") + '</td>' +
      '<td>' + (layout.explanation || "") + '</td>';
    
    if (layout.orientation === "H") {
      horizTbody.appendChild(row);
    } else {
      vertTbody.appendChild(row);
    }
  }
}

// Input validation
function validateAndAssign(e, assignFunc) {
  var value = e.target.value.trim();
  var num = parseInt(value, 10);

  if (!value || isNaN(num) || num <= 0) {
    e.target.style.borderColor = "#ef4444";
    assignFunc(0);
  } else {
    e.target.style.borderColor = "#10b981";
    assignFunc(num);
  }
}

// Initialize everything when DOM is ready
document.addEventListener('DOMContentLoaded', function() {
  console.log('üéØ DOM Content Loaded - Starting initialization');
  
  // Load saved language
  var savedLang = 'en';
  try {
    savedLang = localStorage.getItem('crossword-language') || 'en';
    console.log('üìñ Loaded saved language:', savedLang);
  } catch (e) {
    console.log('‚ö†Ô∏è LocalStorage not available');
  }
  
  // Set up language buttons
  console.log('üèÅ Setting up language buttons...');
  var langButtons = document.querySelectorAll('.lang-btn');
  console.log('üîò Found language buttons:', langButtons.length);
  
  for (var i = 0; i < langButtons.length; i++) {
    var btn = langButtons[i];
    var lang = btn.getAttribute('data-lang');
    console.log('üîß Setting up button for:', lang);
    
    // Use closure to capture lang value
    (function(language) {
      btn.addEventListener('click', function(e) {
        e.preventDefault();
        console.log('üñ±Ô∏è Language button clicked:', language);
        switchLanguage(language);
      });
    })(lang);
  }
  
  // Initialize language
  console.log('üåç Initializing language system...');
  switchLanguage(savedLang);
  
  // Connect WebSocket
  console.log('üîå Connecting to WebSocket...');
  connectWebSocket();
  
  // Add initial word entry rows
  console.log('üìù Adding initial word entry rows...');
  addWordEntryRow();
  addWordEntryRow();
  addWordEntryRow();
  
  // Set up other event listeners
  console.log('üéõÔ∏è Setting up other event listeners...');
  
  // File operations
  document.getElementById("loadButton").onclick = function() {
    document.getElementById("fileInput").click();
  };
  
  document.getElementById("saveButton").onclick = function() {
    var currentEntries = getEntriesFromTable();
    
    if (currentEntries.length === 0) {
      alert("‚ö†Ô∏è No entries to save. Add some words first.");
      return;
    }
    
    var content = currentEntries
      .map(function(entry) { return entry.word + "|" + entry.explanation; })
      .join('\n');
    
    var blob = new Blob([content], { type: 'text/plain' });
    var url = window.URL.createObjectURL(blob);
    
    var a = document.createElement('a');
    a.href = url;
    a.download = 'crossword.cross';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    window.URL.revokeObjectURL(url);
    
    updateMessages("üíæ Saved " + currentEntries.length + " entries to crossword.cross", "success");
  };
  
  // Add/Clear buttons
  document.getElementById("addRowButton").onclick = function() {
    addWordEntryRow();
  };
  
  document.getElementById("clearAllButton").onclick = function() {
    if (confirm("‚ö†Ô∏è Are you sure you want to clear all entries? This action cannot be undone.")) {
      document.getElementById("wordEntryTableBody").innerHTML = "";
      entries = [];
      updateEntryCount();
      updateMessages("üóëÔ∏è All entries cleared", "info");
    }
  };
  
  // Input validation for configuration
  var inputs = [
    { id: "rowsInput", setter: function(v) { rows = v; } },
    { id: "colsInput", setter: function(v) { cols = v; } },
    { id: "maxRowsInput", setter: function(v) { max_rows = v; } },
    { id: "intervalInput", setter: function(v) { interval = v; } }
  ];

  for (var i = 0; i < inputs.length; i++) {
    var input = document.getElementById(inputs[i].id);
    var setter = inputs[i].setter;
    
    (function(inputEl, setterFunc) {
      inputEl.addEventListener("input", function(e) {
        validateAndAssign(e, setterFunc);
      });
    })(input, setter);
  }
  
  // Submit button
  document.getElementById("submitButton").onclick = function() {
    if (!ws || ws.readyState !== WebSocket.OPEN) {
      alert("‚ùå WebSocket not connected. Please check if your server is running.");
      return;
    }
    
    if (!rows || !cols || !max_rows || !interval) {
      alert("‚ùå All fields must be filled with positive numbers.");
      return;
    }
    
    entries = getEntriesFromTable();
    
    if (entries.length === 0) {
      alert("‚ùå Please add some word entries first.");
      return;
    }
    
    updateMessages("üöÄ Generating crossword puzzle...", "info");

    var request = {
      request: "create",
      rows: rows,
      cols: cols,
      max_rows: max_rows,
      interval: interval,
      entries: entries
    };
    
    ws.send(JSON.stringify(request));
  };
  
  console.log('‚úÖ Initialization complete!');
});

console.log('üèÅ JavaScript loading complete!');
</script>
</body>
</html>
